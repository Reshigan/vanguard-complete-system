version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vanguard-postgres
    environment:
      POSTGRES_DB: vanguard
      POSTGRES_USER: vanguard
      POSTGRES_PASSWORD: vanguard123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"  # Changed from 5432:5432 to avoid port conflict
    networks:
      - vanguard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vanguard -d vanguard"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vanguard-redis
    command: redis-server --requirepass vanguard123 --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"  # Changed from 6379:6379 to avoid port conflict
    networks:
      - vanguard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "vanguard123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Application
  app:
    build: .
    container_name: vanguard-app
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://vanguard:vanguard123@postgres:5432/vanguard
      REDIS_URL: redis://:vanguard123@redis:6379
      JWT_SECRET: vanguard-production-secret-change-this-in-production
      OPENAI_API_KEY: your-openai-api-key-here
      UPLOAD_DIR: /app/server/uploads
      LOG_LEVEL: info
    volumes:
      - app_uploads:/app/server/uploads
      - app_logs:/app/logs
      - app_data:/app/server/data
    ports:
      - "3001:3000"  # Changed from 3000:3000 to avoid port conflict
    networks:
      - vanguard-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Worker
  ml-worker:
    build: .
    container_name: vanguard-ml-worker
    command: ["node", "server/workers/ml-worker.js"]
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://vanguard:vanguard123@postgres:5432/vanguard
      REDIS_URL: redis://:vanguard123@redis:6379
      LOG_LEVEL: info
    volumes:
      - app_data:/app/server/data
      - app_logs:/app/logs
    networks:
      - vanguard-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_healthy
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: vanguard-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./client/dist:/usr/share/nginx/html
      - nginx_logs:/var/log/nginx
    ports:
      - "8080:80"  # Changed from 80:80 to avoid port conflict
      - "8443:443"  # Changed from 443:443 to avoid port conflict
    networks:
      - vanguard-network
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  app_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  vanguard-network:
    driver: bridge